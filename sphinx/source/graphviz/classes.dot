digraph "classes" {
rankdir=BT
charset="utf-8"
"src.sports_planner.gui.activities.main.ActivitiesView" [color="black", fontcolor="black", label=<{ActivitiesView|activities_list : Gtk.ListBox \| None<br ALIGN="LEFT"/>activities_scroller : ScrolledWindow<br ALIGN="LEFT"/>application : str<br ALIGN="LEFT"/>calendar : Calendar<br ALIGN="LEFT"/>calendar_box : Box<br ALIGN="LEFT"/>navigation_content : NavigationPage<br ALIGN="LEFT"/>navigation_content_view : ToolbarView<br ALIGN="LEFT"/>spec<br ALIGN="LEFT"/>status_page : StatusPage<br ALIGN="LEFT"/>|add_activities(): None<br ALIGN="LEFT"/>create_activity_row(activity: Activity)<br ALIGN="LEFT"/>display_activity(_: Gtk.ListBox, row: Gtk.ListBoxRow): None<br ALIGN="LEFT"/>save_spec(spec)<br ALIGN="LEFT"/>show_activities_for_day(_)<br ALIGN="LEFT"/>status_update(text: str, i: int, n: int): None<br ALIGN="LEFT"/>update_calendar(_: Gtk.Calendar \| None): None<br ALIGN="LEFT"/>when_athlete_ready(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.io.files.Activity" [color="black", fontcolor="black", label=<{Activity|cache_path : NoneType<br ALIGN="LEFT"/>details : NoneType<br ALIGN="LEFT"/>hrv_df : NoneType<br ALIGN="LEFT"/>laps_df : NoneType<br ALIGN="LEFT"/>meta_details : dict<br ALIGN="LEFT"/>metrics : dict<br ALIGN="LEFT"/>records_df<br ALIGN="LEFT"/>sessions_df : NoneType<br ALIGN="LEFT"/>summaries : DataFrame, dict<br ALIGN="LEFT"/>|cache()<br ALIGN="LEFT"/>get_metric(metric: type['Metric'] \| str)<br ALIGN="LEFT"/>load_activity(path, not_cached_func, details, nocache)<br ALIGN="LEFT"/>load_from_activity_file(path)<br ALIGN="LEFT"/>load_from_connect(workout_id)<br ALIGN="LEFT"/>load_from_df(df)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.ActivityDate" [color="black", fontcolor="black", label=<{ActivityDate|format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.base.ActivityMetric" [color="black", fontcolor="black", label=<{ActivityMetric|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.chart.ActivityPlot" [color="black", fontcolor="black", label=<{ActivityPlot|activity : Activity<br ALIGN="LEFT"/>|add_content(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.activity.ActivityView" [color="black", fontcolor="black", label=<{ActivityView|activity : Activity<br ALIGN="LEFT"/>activity_view : ToolbarView<br ALIGN="LEFT"/>stack : Optional[typing.Optional[Gtk.Stack]]<br ALIGN="LEFT"/>switcher : Optional[typing.Optional[Gtk.StackSwitcher]]<br ALIGN="LEFT"/>|add_content()<br ALIGN="LEFT"/>get_page_for_spec(item_type: str, spec: Spec): Widget<br ALIGN="LEFT"/>spec_changed(source, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.main.Application" [color="black", fontcolor="black", label=<{Application|athlete : Athlete \| None<br ALIGN="LEFT"/>current_athlete : str<br ALIGN="LEFT"/>on_sync_funcs : list[typing.Callable[[], None]]<br ALIGN="LEFT"/>password : str \| None<br ALIGN="LEFT"/>sync_providers : list[SyncProvider]<br ALIGN="LEFT"/>win : MainWindow \| None<br ALIGN="LEFT"/>|create_athlete(): None<br ALIGN="LEFT"/>get_password(dialogue: dialogues.PasswordDialogue, response_id: int): None<br ALIGN="LEFT"/>login(): bool<br ALIGN="LEFT"/>on_activate(app: 'Application'): None<br ALIGN="LEFT"/>register_on_sync_func(func: typing.Callable[[], None]): None<br ALIGN="LEFT"/>sync(widget: Gtk.Widget): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.athlete.Athlete" [color="black", fontcolor="black", label=<{Athlete|activities : DataFrame<br ALIGN="LEFT"/>activities_dir<br ALIGN="LEFT"/>callback_func : Optional[typing.Optional[Callback]]<br ALIGN="LEFT"/>days : DataFrame<br ALIGN="LEFT"/>email : str<br ALIGN="LEFT"/>seasons : list[tuple[datetime.date, datetime.date]]<br ALIGN="LEFT"/>sync_providers : NoneType, list<br ALIGN="LEFT"/>workouts : DataFrame<br ALIGN="LEFT"/>workouts_dir<br ALIGN="LEFT"/>|aggregate_metric(metric: Metric, how: str, callback_func: typing.Optional[Callback], future: bool): pd.Series<br ALIGN="LEFT"/>find_seasons(): list[tuple[datetime.date, datetime.date]]<br ALIGN="LEFT"/>get_activities(date: datetime.date): list[Activity]<br ALIGN="LEFT"/>get_workouts_and_seasons(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.athlete.AthleteMetric" [color="black", fontcolor="black", label=<{AthleteMetric|<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.AverageHR" [color="black", fontcolor="black", label=<{AverageHR|format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.AveragePower" [color="black", fontcolor="black", label=<{AveragePower|format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.AverageSpeed" [color="black", fontcolor="black", label=<{AverageSpeed|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.pmc.Banister" [color="black", fontcolor="black", label=<{Banister|df<br ALIGN="LEFT"/>metric<br ALIGN="LEFT"/>pmc<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>|find_params(season)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.CV" [color="black", fontcolor="black", label=<{CV|format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.athlete.Callback" [color="black", fontcolor="black", label=<{Callback|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CogganEF" [color="black", fontcolor="black", label=<{CogganEF|deps : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CogganIF" [color="black", fontcolor="black", label=<{CogganIF|deps : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CogganNP" [color="black", fontcolor="black", label=<{CogganNP|name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CogganTSS" [color="black", fontcolor="black", label=<{CogganTSS|deps : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CogganVI" [color="black", fontcolor="black", label=<{CogganVI|deps : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.Curve" [color="black", fontcolor="black", label=<{Curve|column : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.CurveMeta" [color="black", fontcolor="black", label=<{CurveMeta|classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.chart.CurveViewer" [color="black", fontcolor="black", label=<{CurveViewer|activity : Activity<br ALIGN="LEFT"/>|add_content(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.coggan.CyclingFTP" [color="black", fontcolor="black", label=<{CyclingFTP|name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.CyclingMetric" [color="black", fontcolor="black", label=<{CyclingMetric|deps : list<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.overview.DropFrame" [color="black", fontcolor="black", label=<{DropFrame|controller<br ALIGN="LEFT"/>draggable : bool<br ALIGN="LEFT"/>frame : Frame<br ALIGN="LEFT"/>occupied : bool<br ALIGN="LEFT"/>overview<br ALIGN="LEFT"/>|add_content(): None<br ALIGN="LEFT"/>get_child()<br ALIGN="LEFT"/>on_drop(value: Gtk.DropTarget, data: str, x: float, y: float): None<br ALIGN="LEFT"/>on_spec_changed(source, data)<br ALIGN="LEFT"/>set_child(child)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.chart.FigureWebView" [color="black", fontcolor="black", label=<{FigureWebView|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.garmin.Firstbeat" [color="black", fontcolor="black", label=<{Firstbeat|allow_zero : bool<br ALIGN="LEFT"/>field_name : str<br ALIGN="LEFT"/>scale : float<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.GOVSS" [color="black", fontcolor="black", label=<{GOVSS|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.io.sync.garmin.Garmin" [color="black", fontcolor="black", label=<{Garmin|email<br ALIGN="LEFT"/>workouts : NoneType<br ALIGN="LEFT"/>|download_activity(activityId)<br ALIGN="LEFT"/>get_activities(start, limit)<br ALIGN="LEFT"/>get_schedule(start, end)<br ALIGN="LEFT"/>get_workouts(start, end)<br ALIGN="LEFT"/>save_workout_jsons()<br ALIGN="LEFT"/>sync()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.athlete.Height" [color="black", fontcolor="black", label=<{Height|name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.main.HomeButton" [color="black", fontcolor="black", label=<{HomeButton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.IWF" [color="black", fontcolor="black", label=<{IWF|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.LNP" [color="black", fontcolor="black", label=<{LNP|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.io.sync.garmin.LoginException" [color="black", fontcolor="red", label=<{LoginException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.gui.main.MainWindow" [color="black", fontcolor="black", label=<{MainWindow|activities_button : Button<br ALIGN="LEFT"/>activities_view : ActivitiesView<br ALIGN="LEFT"/>application : str<br ALIGN="LEFT"/>header : HeaderBar<br ALIGN="LEFT"/>home_button : Button<br ALIGN="LEFT"/>home_view : Grid<br ALIGN="LEFT"/>main_stack : Stack<br ALIGN="LEFT"/>main_view : ToolbarView<br ALIGN="LEFT"/>performance_button<br ALIGN="LEFT"/>performance_view : PerformanceView<br ALIGN="LEFT"/>planning_button<br ALIGN="LEFT"/>planning_view : PlanningView<br ALIGN="LEFT"/>sync_button : Button<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.chart.MapViewer" [color="black", fontcolor="black", label=<{MapViewer|activity : Activity<br ALIGN="LEFT"/>|add_content(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.MeanMax" [color="black", fontcolor="black", label=<{MeanMax|column : str<br ALIGN="LEFT"/>time : int<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.MeanMaxMeta" [color="black", fontcolor="black", label=<{MeanMaxMeta|classes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.base.Metric" [color="black", fontcolor="black", label=<{Metric|activity : str<br ALIGN="LEFT"/>deps : list<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>df<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>last_changed : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>results : NoneType<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|add_dep(dep)<br ALIGN="LEFT"/><I>applicable</I>()<br ALIGN="LEFT"/><I>compute</I>()<br ALIGN="LEFT"/>get_applicable()<br ALIGN="LEFT"/>get_metric(metric)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.calculate.MetricsCalculator" [color="black", fontcolor="black", label=<{MetricsCalculator|activity : str<br ALIGN="LEFT"/>deps : list<br ALIGN="LEFT"/>metrics<br ALIGN="LEFT"/>|compute(recompute_all)<br ALIGN="LEFT"/>order_deps(desired_metrics)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.overview.OverviewPage" [color="black", fontcolor="black", label=<{OverviewPage|activity : Activity \| None<br ALIGN="LEFT"/>grid : Grid<br ALIGN="LEFT"/>|add_content()<br ALIGN="LEFT"/>get_frame_at(i: int, j: int): 'DropFrame'<br ALIGN="LEFT"/>move(frame_to: 'DropFrame', pos_from: tuple[int, int]): None<br ALIGN="LEFT"/>on_spec_changed(source, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.overview.OverviewWidget" [color="black", fontcolor="black", label=<{OverviewWidget|activity : Activity \| None<br ALIGN="LEFT"/>header : HeaderBar<br ALIGN="LEFT"/>toolbar_view : ToolbarView<br ALIGN="LEFT"/>|add_content()<br ALIGN="LEFT"/>on_prepare(drag_source: Gtk.DragSource, x: float, y: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.pmc.PMC" [color="black", fontcolor="black", label=<{PMC|athlete<br ALIGN="LEFT"/>df<br ALIGN="LEFT"/>metric<br ALIGN="LEFT"/>t_long : int<br ALIGN="LEFT"/>t_short : int<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.gui.activities.activity.PandasViewer" [color="black", fontcolor="black", label=<{PandasViewer|activity : Activity<br ALIGN="LEFT"/>|add_content(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.dialogues.PasswordDialogue" [color="black", fontcolor="black", label=<{PasswordDialogue|entry : Entry<br ALIGN="LEFT"/>|get_password()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.performance.main.PerformanceView" [color="black", fontcolor="black", label=<{PerformanceView|application<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>performance_stack : Stack<br ALIGN="LEFT"/>status_page : StatusPage<br ALIGN="LEFT"/>view : ToolbarView<br ALIGN="LEFT"/>|add_charts(names)<br ALIGN="LEFT"/>create_banister(banister)<br ALIGN="LEFT"/>create_pmc(pmc)<br ALIGN="LEFT"/>status_update(text: str, i: int, n: int)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_page(page)<br ALIGN="LEFT"/>update_status_page(page_name, text: str, i: int, n: int)<br ALIGN="LEFT"/>when_data_ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.planning.main.PlanningView" [color="black", fontcolor="black", label=<{PlanningView|application<br ALIGN="LEFT"/>calendar : Calendar, NoneType<br ALIGN="LEFT"/>calendar_sidebar : NavigationPage, NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>stack : Stack<br ALIGN="LEFT"/>status_page : StatusPage<br ALIGN="LEFT"/>view : ToolbarView<br ALIGN="LEFT"/>|add_calendar()<br ALIGN="LEFT"/>display_activity(_, row)<br ALIGN="LEFT"/>show_activities_for_day(_)<br ALIGN="LEFT"/>status_update(text: str, i: int, n: int)<br ALIGN="LEFT"/>update_calendar(_)<br ALIGN="LEFT"/>when_athlete_ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.RTP" [color="black", fontcolor="black", label=<{RTP|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.RunningMetric" [color="black", fontcolor="black", label=<{RunningMetric|deps : list<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.garmin.RunningVO2Max" [color="black", fontcolor="black", label=<{RunningVO2Max|deps : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.widgets.base.Widget.SettingsWindow" [color="black", fontcolor="black", label=<{SettingsWindow|text_buffer : Buffer<br ALIGN="LEFT"/>widget : str<br ALIGN="LEFT"/>|check_and_save_spec(): None<br ALIGN="LEFT"/>make_configuration_field(): Adw.PreferencesRow<br ALIGN="LEFT"/>on_close(_: Gtk.Widget): bool<br ALIGN="LEFT"/>send_spec_changed(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.Sport" [color="black", fontcolor="black", label=<{Sport|name : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.status.StatusPage" [color="black", fontcolor="black", label=<{StatusPage|bar : ProgressBar<br ALIGN="LEFT"/>status_page : StatusPage<br ALIGN="LEFT"/>|update(text: str, i: int, n: int): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.io.sync.base.SyncProvider" [color="black", fontcolor="black", label=<{SyncProvider|workouts : DataFrame<br ALIGN="LEFT"/>|<I>get_workouts</I>(start: datetime.date, end: datetime.date)<br ALIGN="LEFT"/><I>sync</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.activity.TimerTime" [color="black", fontcolor="black", label=<{TimerTime|name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.pmc.UniversalStressScore" [color="black", fontcolor="black", label=<{UniversalStressScore|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|applicable()<br ALIGN="LEFT"/>compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.garmin.VO2Max" [color="black", fontcolor="black", label=<{VO2Max|allow_zero : bool<br ALIGN="LEFT"/>field_name : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>scale : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.athlete.Weight" [color="black", fontcolor="black", label=<{Weight|name : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.gui.widgets.base.Widget" [color="black", fontcolor="black", label=<{Widget|spec : dict[str, Spec]<br ALIGN="LEFT"/>|<I>add_content</I>(): None<br ALIGN="LEFT"/>open_settings(_: Gtk.Button): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.io.garmin.workouts.Workout" [color="black", fontcolor="black", label=<{Workout|original<br ALIGN="LEFT"/>segments<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.sports_planner.metrics.govss.XPace" [color="black", fontcolor="black", label=<{XPace|deps : list<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|compute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.sports_planner.metrics.athlete.Height" -> "src.sports_planner.metrics.athlete.AthleteMetric" [arrowhead="empty", arrowtail="none"];
"src.sports_planner.metrics.athlete.Weight" -> "src.sports_planner.metrics.athlete.AthleteMetric" [arrowhead="empty", arrowtail="none"];
"src.sports_planner.metrics.base.ActivityMetric" -> "src.sports_planner.metrics.base.Metric" [arrowhead="empty", arrowtail="none"];
"src.sports_planner.metrics.garmin.VO2Max" -> "src.sports_planner.metrics.garmin.Firstbeat" [arrowhead="empty", arrowtail="none"];
"src.sports_planner.gui.main.HomeButton" -> "src.sports_planner.gui.main.MainWindow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="performance_button", style="solid"];
"src.sports_planner.gui.main.HomeButton" -> "src.sports_planner.gui.main.MainWindow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="planning_button", style="solid"];
"src.sports_planner.gui.activities.overview.OverviewPage" -> "src.sports_planner.gui.activities.overview.DropFrame" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="overview", style="solid"];
"src.sports_planner.metrics.pmc.PMC" -> "src.sports_planner.metrics.pmc.Banister" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pmc", style="solid"];
}
